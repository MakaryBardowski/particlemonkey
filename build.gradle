plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
}



group = 'com.epagagames'
version = '1.1.1'

ext {
    jmonkeyengine_version = '3.3.2-stable'
}

dependencies {
    api "org.jmonkeyengine:jme3-core:$jmonkeyengine_version"
    api "org.jmonkeyengine:jme3-effects:$jmonkeyengine_version"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude '**/.backups'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'particlemonkey'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                developers {
                    developer {
                        name = 'Greg Hoffman'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://github.com/Jeddic/particlemonkey/blob/master/LICENSE'
                    }
                }
                name = 'Particlemonkey'
                description = 'A particle library for the jmonkey engine'
                url = 'https://github.com/Jeddic/particlemonkey'
                scm {
                    url = 'https://github.com/Jeddic/particlemonkey'
                }
            }
        }
    }
    // Staging to OSSRH relies on the existence of 2 properties
        // (ossrhUsername and ossrhPassword)
        // which should be stored in ~/.gradle/gradle.properties
        repositories {
            maven {
                credentials {
                    username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                    password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
                }
                name = 'OSSRH'

                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'

                // Have to evaluate the project version late because when the conventions
                // are configured the project build file hasn't set the version yet.
                afterEvaluate {
                    url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
}

// signing tasks
// Signing relies on the existence of 3 properties
// (signing.keyId, signing.password, and signing.secretKeyRingFile)
// which should be stored in ~/.gradle/gradle.properties

signing {
    sign publishing.publications
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signing.keyId') }
}